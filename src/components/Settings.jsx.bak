// filepath: c:\Users\pizza\Desktop\meridian master GPT 2nd attempt\src\components\Settings.jsx
import React, { useState, useEffect } from 'react'
import DisclaimerModal from './DisclaimerModal'
import pwaInstaller from '../utils/pwaInstaller'

const Settings = ({ navigateTo, darkMode, setDarkMode }) => {
  const [showDisclaimer, setShowDisclaimer] = useState(false)
  const [autoFlip, setAutoFlip] = useState(false)
  const [showRomanization, setShowRomanization] = useState(true)
  const [voicePronunciation, setVoicePronunciation] = useState(false)
  const [cardsPerSession, setCardsPerSession] = useState('10')
  const [shuffleCards, setShuffleCards] = useState(true)
  const [pwaStatus, setPwaStatus] = useState(pwaInstaller.getStatus())

  useEffect(() => {
    // Update PWA status periodically
    const updatePWAStatus = () => {
      setPwaStatus(pwaInstaller.getStatus())
    }
    
    const interval = setInterval(updatePWAStatus, 1000)
    return () => clearInterval(interval)
  }, [])

  const handleInstallPWA = async () => {
    const success = await pwaInstaller.install()
    if (success) {
      setPwaStatus(pwaInstaller.getStatus())
    }
  }

  const exportProgress = () => {
    try {
      const progressData = localStorage.getItem('meridian-mastery-progress')
      const data = {
        progress: progressData ? JSON.parse(progressData) : {},
        exportDate: new Date().toISOString(),
        version: '1.0'
      }
      
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `meridian-mastery-progress-${new Date().toISOString().split('T')[0]}.json`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch (error) {
      alert('Failed to export progress data')
    }
  }

  const importData = () => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = '.json'
    input.onchange = (e) => {
      const file = e.target.files[0]
      if (file) {
        const reader = new FileReader()
        reader.onload = (e) => {
          try {
            const data = JSON.parse(e.target.result)
            if (data.progress) {
                          localStorage.setItem('meridian-mastery-progress', JSON.stringify(data.progress))
              alert('Progress data imported successfully!')
            } else {
              alert('Invalid file format')
            }
          } catch (error) {
            alert('Failed to import data')
          }
        }
        reader.readAsText(file)
      }
    }
    input.click()
  }

  const resetAllData = () => {
    if (confirm('Are you sure you want to reset all progress data? This cannot be undone.')) {
      localStorage.removeItem('meridian-mastery-progress')
      localStorage.removeItem('meridian-mastery-flags')
      alert('All data has been reset.')
      window.location.reload()
    }
  }
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-800 text-white">
      <div className="container mx-auto px-4 py-6 sm:py-8">        {/* Header */}
        <header className="text-center mb-6 sm:mb-8">
          <button 
            onClick={() => navigateTo('home')}
            className="inline-block mb-4 text-yellow-400 hover:text-yellow-300 text-sm font-medium"
          >
            ‚Üê Back to Home
          </button>
          <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold mb-2">Settings</h1>
          <p className="text-gray-300 text-sm sm:text-base">Customize your experience</p>
        </header>

        <div className="max-w-sm sm:max-w-md mx-auto space-y-4 sm:space-y-6">          {/* Theme Toggle */}
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-4 sm:p-6">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-semibold text-lg">Dark Mode</h3>
                <p className="text-gray-400 text-sm">Toggle between light and dark themes</p>
              </div>
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  darkMode ? 'bg-yellow-500' : 'bg-gray-600'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    darkMode ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>
          </div>          {/* Study Preferences */}
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-4 sm:p-6">
            <h3 className="font-semibold text-lg mb-4">Study Preferences</h3>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span>Auto-flip cards</span>
                <input 
                  type="checkbox" 
                  checked={autoFlip}
                  onChange={(e) => setAutoFlip(e.target.checked)}
                  className="w-4 h-4 accent-yellow-500" 
                />
              </div>
              <div className="flex items-center justify-between">
                <span>Show romanization</span>
                <input 
                  type="checkbox" 
                  checked={showRomanization}
                  onChange={(e) => setShowRomanization(e.target.checked)}
                  className="w-4 h-4 accent-yellow-500" 
                />
              </div>
              <div className="flex items-center justify-between">
                <span>Voice pronunciation</span>
                <input 
                  type="checkbox" 
                  checked={voicePronunciation}
                  onChange={(e) => setVoicePronunciation(e.target.checked)}
                  className="w-4 h-4 accent-yellow-500" 
                />
              </div>
            </div>
          </div>          {/* Session Settings */}
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-4 sm:p-6">
            <h3 className="font-semibold text-lg mb-4">Session Settings</h3>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span>Cards per session</span>
                <select 
                  value={cardsPerSession}
                  onChange={(e) => setCardsPerSession(e.target.value)}
                  className="bg-gray-700 text-white px-3 py-1 rounded border border-gray-600 focus:border-yellow-500 focus:outline-none"
                >
                  <option value="10">10</option>
                  <option value="20">20</option>
                  <option value="50">50</option>
                  <option value="all">All</option>
                </select>
              </div>
              <div className="flex items-center justify-between">
                <span>Shuffle cards</span>
                <input 
                  type="checkbox" 
                  checked={shuffleCards}
                  onChange={(e) => setShuffleCards(e.target.checked)}
                  className="w-4 h-4 accent-yellow-500" 
                />
              </div>
            </div>
          </div>

          {/* PWA Installation */}
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-4 sm:p-6">
            <h3 className="font-semibold text-lg mb-4 text-yellow-400">üì± Install App</h3>
            
            {pwaStatus.isStandalone ? (
              <div className="bg-green-900/20 border border-green-600 rounded-lg p-3 sm:p-4">
                <div className="flex items-center text-green-400 mb-2">
                  <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                  </svg>
                  App Installed!
                </div>
                <p className="text-sm text-gray-300">
                  You're using the installed version. Enjoy offline access to all your pressure point knowledge!
                </p>
              </div>
            ) : pwaStatus.canInstall ? (
              <div className="space-y-3">
                <p className="text-sm text-gray-300">
                  Install this app for offline access and a better experience.
                </p>
                <button 
                  onClick={handleInstallPWA}
                  className="w-full bg-yellow-600 hover:bg-yellow-700 text-black font-semibold py-3 px-4 rounded-lg transition-all duration-200"
                >
                  Install Meridian Mastery
                </button>
                <p className="text-xs text-gray-400 text-center">
                  Works offline ‚Ä¢ No app store needed ‚Ä¢ Instant access
                </p>
              </div>
            ) : (
              <div className="space-y-3">
                <p className="text-sm text-gray-300">
                  Install instructions for {pwaStatus.platform}:
                </p>
                <div className="bg-gray-700 rounded-lg p-3">
                  {pwaInstaller.getInstallInstructions().steps.map((step, index) => (
                    <p key={index} className="text-xs text-gray-300 mb-1 last:mb-0">
                      {step}
                    </p>
                  ))}
                </div>
                <p className="text-xs text-gray-400 text-center">
                  Installing gives you offline access and faster loading
                </p>
              </div>
            )}
            
            {/* Offline Status */}
            <div className="mt-4 pt-4 border-t border-gray-600">
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-400">Connection Status:</span>
                <span className={`font-medium ${pwaStatus.isOnline ? 'text-green-400' : 'text-red-400'}`}>
                  {pwaStatus.isOnline ? 'üü¢ Online' : 'üî¥ Offline'}
                </span>
              </div>
            </div>
          </div>          {/* About Section */}
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-4 sm:p-6">
            <h3 className="font-semibold text-lg mb-4">About</h3>
            <div className="text-sm text-gray-300 space-y-2">
              <p><strong>Meridian Mastery v1.0</strong></p>
              <p>Based on traditional Korean/TCM principles as taught in Kuk Sool Won.</p>
              <p>Content verified from Master R. Barry Harmon's pressure point manual.</p>
              <p className="mt-4 pt-4 border-t border-gray-600">
                ¬© 2025 Meridian Mastery. For educational purposes.
              </p>
            </div>
          </div>          {/* Safety Disclaimer */}
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-4 sm:p-6">
            <h3 className="font-semibold text-lg mb-4 text-red-400">‚ö†Ô∏è Safety Disclaimer</h3>
            <div className="bg-red-900/20 border border-red-600 rounded-lg p-4 mb-4">
              <p className="text-sm text-gray-300 mb-3">
                <strong className="text-red-400">FOR EDUCATIONAL PURPOSES ONLY</strong>
              </p>
              <p className="text-xs text-gray-400 leading-relaxed">
                This application provides theoretical knowledge only. Pressure point techniques 
                can be dangerous if applied incorrectly. <strong>Never practice these techniques 
                without proper training and supervision from a qualified martial arts instructor.</strong>
              </p>
            </div>            <div className="space-y-2 text-xs text-gray-400">
              <p><strong>Requirements for practice:</strong></p>
              <ul className="list-disc list-inside space-y-1 ml-2">
                <li>Certified martial arts instructor supervision</li>
                <li>Proper training in pressure point application</li>
                <li>Understanding of safety protocols and contraindications</li>
                <li>Knowledge of potential risks and proper techniques</li>
              </ul>
              <p className="mt-3 pt-2 border-t border-gray-700">
                Disclaimer accepted on: {(() => {
                  const date = localStorage.getItem('meridian-mastery-disclaimer-date')
                  return date ? new Date(date).toLocaleDateString() : 'Not recorded'
                })()}
              </p>
            </div>
            
            <button
              onClick={() => setShowDisclaimer(true)}
              className="w-full mt-4 bg-yellow-800/30 hover:bg-yellow-700/40 border border-yellow-600 text-yellow-400 py-2 px-4 rounded-lg text-sm transition-all duration-200"
            >              üìã View Full Disclaimer
            </button>
          </div>
          
          {/* Data Management */}
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-4 sm:p-6">
            <h3 className="font-semibold text-lg mb-4">Data Management</h3>
            <div className="space-y-3">
              <button 
                onClick={exportProgress}
                className="w-full bg-gray-700 hover:bg-gray-600 text-white py-2 sm:py-3 px-4 rounded-xl text-sm sm:text-base transition-all duration-200"
              >
                Export Progress
              </button>
              <button 
                onClick={importData}
                className="w-full bg-gray-700 hover:bg-gray-600 text-white py-2 sm:py-3 px-4 rounded-xl text-sm sm:text-base transition-all duration-200"
              >
                Import Data
              </button>
              <button 
                onClick={resetAllData}
                className="w-full bg-red-700 hover:bg-red-600 text-white py-2 sm:py-3 px-4 rounded-xl text-sm sm:text-base transition-all duration-200"
              >
                Reset All Data
              </button>
            </div>
          </div>

          {/* Developer Tools */}
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-4 sm:p-6">
            <h3 className="font-semibold text-lg mb-4">Developer Tools</h3>
            <div className="space-y-3">
              <button 
                onClick={() => navigateTo('flagged-issues')}
                className="w-full bg-orange-700 hover:bg-orange-600 text-white py-2 px-4 rounded-xl flex items-center justify-center"
              >
                <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z"/>
                </svg>
                View Flagged Issues
              </button>
              <div className="text-xs text-gray-400 text-center">
                {(() => {
                  const flags = JSON.parse(localStorage.getItem('meridian-mastery-flags') || '[]')
                  return `${flags.length} issues reported`
                })()}
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Disclaimer Modal */}
      <DisclaimerModal 
        isOpen={showDisclaimer} 
        onAccept={() => setShowDisclaimer(false)} 
      />
    </div>
  )
}

  const exportProgress = () => {
    try {
      const progressData = localStorage.getItem('meridian-mastery-progress')
      const data = {
        progress: progressData ? JSON.parse(progressData) : {},
        exportDate: new Date().toISOString(),
        version: '1.0'
      }
      
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `meridian-mastery-progress-${new Date().toISOString().split('T')[0]}.json`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch (error) {
      alert('Failed to export progress data')
    }
  }

  const importData = () => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = '.json'
    input.onchange = (e) => {
      const file = e.target.files[0]
      if (file) {
        const reader = new FileReader()
        reader.onload = (e) => {
          try {
            const data = JSON.parse(e.target.result)
            if (data.progress) {
              localStorage.setItem('meridian-mastery-progress', JSON.stringify(data.progress))
              alert('Progress data imported successfully!')
            } else {
              alert('Invalid file format')
            }
          } catch (error) {
            alert('Failed to import data')
          }
        }
        reader.readAsText(file)
      }
    }
    input.click()
  }

  const resetAllData = () => {
    if (confirm('Are you sure you want to reset all progress data? This cannot be undone.')) {
      localStorage.removeItem('meridian-mastery-progress')
      localStorage.removeItem('meridian-mastery-flags')
      alert('All data has been reset.')
      window.location.reload()
    }
  }
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-800 text-white">
      <div className="container mx-auto px-4 py-8">        {/* Header */}
        <header className="text-center mb-8">
          <button 
            onClick={() => navigateTo('home')}
            className="inline-block mb-4 text-yellow-400 hover:text-yellow-300 text-sm font-medium"
          >
            ‚Üê Back to Home
          </button>
          <h1 className="text-3xl md:text-4xl font-bold mb-2">Settings</h1>
          <p className="text-gray-300">Customize your experience</p>
        </header>

        <div className="max-w-md mx-auto space-y-6">
          {/* Theme Toggle */}
          <div className="card">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-semibold text-lg">Dark Mode</h3>
                <p className="text-gray-400 text-sm">Toggle between light and dark themes</p>
              </div>
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  darkMode ? 'bg-yellow-500' : 'bg-gray-600'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    darkMode ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>
          </div>

          {/* Study Preferences */}
          <div className="card">
            <h3 className="font-semibold text-lg mb-4">Study Preferences</h3>            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span>Auto-flip cards</span>
                <input 
                  type="checkbox" 
                  checked={autoFlip}
                  onChange={(e) => setAutoFlip(e.target.checked)}
                  className="w-4 h-4 accent-yellow-500" 
                />
              </div>
              <div className="flex items-center justify-between">
                <span>Show romanization</span>
                <input 
                  type="checkbox" 
                  checked={showRomanization}
                  onChange={(e) => setShowRomanization(e.target.checked)}
                  className="w-4 h-4 accent-yellow-500" 
                />
              </div>
              <div className="flex items-center justify-between">
                <span>Voice pronunciation</span>
                <input 
                  type="checkbox" 
                  checked={voicePronunciation}
                  onChange={(e) => setVoicePronunciation(e.target.checked)}
                  className="w-4 h-4 accent-yellow-500" 
                />
              </div>
            </div>
          </div>

          {/* Session Settings */}
          <div className="card">
            <h3 className="font-semibold text-lg mb-4">Session Settings</h3>            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span>Cards per session</span>
                <select 
                  value={cardsPerSession}
                  onChange={(e) => setCardsPerSession(e.target.value)}
                  className="bg-gray-700 text-white px-3 py-1 rounded border border-gray-600 focus:border-yellow-500 focus:outline-none"
                >
                  <option value="10">10</option>
                  <option value="20">20</option>
                  <option value="50">50</option>
                  <option value="all">All</option>
                </select>
              </div>
              <div className="flex items-center justify-between">
                <span>Shuffle cards</span>
                <input 
                  type="checkbox" 
                  checked={shuffleCards}
                  onChange={(e) => setShuffleCards(e.target.checked)}
                  className="w-4 h-4 accent-yellow-500" 
                />
              </div>
            </div>
          </div>          {/* About Section */}
          <div className="card">
            <h3 className="font-semibold text-lg mb-4">About</h3>
            <div className="text-sm text-gray-300 space-y-2">
              <p><strong>Meridian Mastery v1.0</strong></p>
              <p>Based on traditional Korean/TCM principles as taught in Kuk Sool Won.</p>
              <p>Content verified from Master R. Barry Harmon's pressure point manual.</p>
              <p className="mt-4 pt-4 border-t border-gray-600">
                ¬© 2025 Meridian Mastery. For educational purposes.
              </p>
            </div>
          </div>

          {/* Safety Disclaimer */}
          <div className="card">
            <h3 className="font-semibold text-lg mb-4 text-red-400">‚ö†Ô∏è Safety Disclaimer</h3>
            <div className="bg-red-900/20 border border-red-600 rounded-lg p-4 mb-4">
              <p className="text-sm text-gray-300 mb-3">
                <strong className="text-red-400">FOR EDUCATIONAL PURPOSES ONLY</strong>
              </p>
              <p className="text-xs text-gray-400 leading-relaxed">
                This application provides theoretical knowledge only. Pressure point techniques 
                can be dangerous if applied incorrectly. <strong>Never practice these techniques 
                without proper training and supervision from a qualified martial arts instructor.</strong>
              </p>
            </div>
            <div className="space-y-2 text-xs text-gray-400">
              <p><strong>Requirements for practice:</strong></p>
              <ul className="list-disc list-inside space-y-1 ml-2">
                <li>Certified martial arts instructor supervision</li>
                <li>Proper training in pressure point application</li>
                <li>Understanding of safety protocols and contraindications</li>
                <li>Knowledge of potential risks and proper techniques</li>
              </ul>              <p className="mt-3 pt-2 border-t border-gray-700">
                Disclaimer accepted on: {(() => {
                  const date = localStorage.getItem('meridian-mastery-disclaimer-date')
                  return date ? new Date(date).toLocaleDateString() : 'Not recorded'
                })()}
              </p>
            </div>
            
            <button
              onClick={() => setShowDisclaimer(true)}
              className="w-full mt-4 bg-yellow-800/30 hover:bg-yellow-700/40 border border-yellow-600 text-yellow-400 py-2 px-4 rounded-lg text-sm transition-all duration-200"
            >
              üìã View Full Disclaimer
            </button>
          </div>{/* Data Management */}
          <div className="card">
            <h3 className="font-semibold text-lg mb-4">Data Management</h3>
            <div className="space-y-3">
              <button className="w-full bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-xl">
                Export Progress
              </button>
              <button className="w-full bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-xl">
                Import Data
              </button>
              <button className="w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-xl">
                Reset All Data
              </button>
            </div>
          </div>

          {/* Developer Tools */}
          <div className="card">
            <h3 className="font-semibold text-lg mb-4">Developer Tools</h3>
            <div className="space-y-3">
              <button 
                onClick={() => navigateTo('flagged-issues')}
                className="w-full bg-orange-700 hover:bg-orange-600 text-white py-2 px-4 rounded-xl flex items-center justify-center"
              >
                <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z"/>
                </svg>
                View Flagged Issues
              </button>
              <div className="text-xs text-gray-400 text-center">
                {(() => {
                  const flags = JSON.parse(localStorage.getItem('meridian-mastery-flags') || '[]')
                  return `${flags.length} issues reported`
                })()}
              </div>
            </div>
          </div>        </div>
      </div>
      
      {/* Disclaimer Modal */}
      <DisclaimerModal 
        isOpen={showDisclaimer} 
        onAccept={() => setShowDisclaimer(false)} 
      />
    </div>
  )
}

export default Settings