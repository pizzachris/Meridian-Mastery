// filepath: c:\Users\pizza\Desktop\meridian master GPT 2nd attempt\src\components\Flashcard.jsx
import React, { useState, useEffect } from 'react'
import flashcardsData from '../data/flashcards.json'
import martialArtsData from '../data/martialArts.json'
import { ProgressTracker } from '../utils/progressTracker'
import pronunciationManager from '../utils/pronunciation'
import pronunciationHelper from '../utils/pronunciationHelper'

// Enhanced Pronunciation Guide Component
const PronunciationGuide = ({ romanized }) => {
  const breakdown = pronunciationHelper.getSimpleBreakdown(romanized)
  const acupunctureTips = pronunciationHelper.getAcupunctureTermTips(romanized)
  
  if (!breakdown || breakdown.length === 0) {
    return (
      <div className="text-xs text-gray-300 text-center">
        <p>Pronounce: <span className="font-mono text-yellow-300 bg-gray-800 px-2 py-1 rounded">{romanized}</span></p>
        {acupunctureTips && (
          <div className="mt-2 text-xs text-blue-200">
            💡 {acupunctureTips[0]}
          </div>
        )}
      </div>
    )
  }

  return (
    <div className="text-xs text-gray-300 space-y-3">
      {breakdown.map((wordData, wordIndex) => (
        <div key={wordIndex} className="border-l-2 border-purple-400 pl-3">
          {/* Syllable Breakdown with Visual Separation */}
          <div className="mb-2">
            <div className="flex items-center gap-1 mb-1">
              <span className="text-purple-300 font-semibold text-xs">📝 Syllables:</span>
            </div>
            <div className="flex flex-wrap gap-1">
              {wordData.syllables.map((syllable, index) => (
                <span key={index} className="inline-flex items-center">
                  <span className="font-mono text-yellow-300 bg-gray-800 px-2 py-1 rounded text-xs border border-yellow-600">
                    {syllable}
                  </span>
                  {index < wordData.syllables.length - 1 && (
                    <span className="text-gray-500 mx-1 text-xs">•</span>
                  )}
                </span>
              ))}
            </div>
          </div>
          
          {/* Phonetic Guide with Sound Indicators */}
          <div className="mb-2">
            <div className="flex items-center gap-1 mb-1">
              <span className="text-green-300 font-semibold text-xs">🔊 Sounds like:</span>
            </div>
            <div className="flex flex-wrap gap-1">
              {wordData.phonetic.map((phonetic, index) => (
                <span key={index} className="inline-flex items-center">
                  <span className="font-mono text-green-300 bg-gray-800 px-2 py-1 rounded text-xs border border-green-600">
                    {phonetic}
                  </span>
                  {index < wordData.phonetic.length - 1 && (
                    <span className="text-gray-500 mx-1 text-xs">-</span>
                  )}
                </span>
              ))}
            </div>
          </div>
          
          {/* Pronunciation Tips */}
          {wordData.guide && (
            <div className="bg-gradient-to-r from-blue-900/20 to-blue-800/20 border border-blue-600 rounded p-2 mb-2">
              <div className="flex items-start gap-1">
                <span className="text-blue-300 text-xs">💡</span>
                <span className="text-blue-200 text-xs leading-relaxed">{wordData.guide}</span>
              </div>
            </div>
          )}
        </div>
      ))}
      
      {/* Acupuncture-specific tips */}
      {acupunctureTips && acupunctureTips.length > 0 && (
        <div className="bg-gradient-to-r from-amber-900/20 to-amber-800/20 border border-amber-600 rounded p-2">
          <div className="flex items-center gap-1 mb-1">
            <span className="text-amber-300 font-semibold text-xs">🏥 Acupuncture Terms:</span>
          </div>
          {acupunctureTips.map((tip, index) => (
            <div key={index} className="flex items-start gap-1 mb-1">
              <span className="text-amber-300 text-xs">•</span>
              <span className="text-amber-200 text-xs leading-relaxed">{tip}</span>
            </div>
          ))}
        </div>
      )}
      
      {/* Action Hint */}
      <div className="text-center pt-2 border-t border-gray-600">
        <div className="flex items-center justify-center gap-2 text-xs text-gray-400">
          <span>🔊</span>
          <span>Tap pronunciation buttons to hear audio</span>
        </div>
      </div>
    </div>
  )
}

const Flashcard = ({ navigateTo, selectedPointId, sessionMode }) => {  const [currentCard, setCurrentCard] = useState(0)
  const [isFlipped, setIsFlipped] = useState(false)
  const [userStats, setUserStats] = useState({})
  const [showFlagModal, setShowFlagModal] = useState(false)
  const [flagReason, setFlagReason] = useState('')
  const [flagSubmitted, setFlagSubmitted] = useState(false)
  const [voiceInfo, setVoiceInfo] = useState(null)
  const [showPronunciationGuide, setShowPronunciationGuide] = useState(false)
  
  const allFlashcards = flashcardsData.flashcards
    // Filter flashcards based on session mode
  const getFilteredFlashcards = () => {
    if (!sessionMode) return allFlashcards
    
    switch (sessionMode) {
      case 'meridian':
        // For now, return all cards - you can add specific meridian filtering logic here
        return allFlashcards
      case 'region':
        // Filter by body regions - you can add specific region filtering logic here
        return allFlashcards
      case 'theme':
        // Filter by healing themes - you can add specific theme filtering logic here
        return allFlashcards
      case 'maek-chi-ki':
        // Return cards in exact teaching order as specified in martial arts data
        return martialArtsData.maekChiKi.map(pointNumber => 
          allFlashcards.find(card => card.number === pointNumber)
        ).filter(card => card !== undefined)
      case 'maek-cha-ki':
        // Return cards in exact teaching order as specified in martial arts data
        return martialArtsData.maekChaKi.map(pointNumber => 
          allFlashcards.find(card => card.number === pointNumber)
        ).filter(card => card !== undefined)
      default:
        return allFlashcards
    }
  }
  
  const flashcards = getFilteredFlashcards()
  const card = flashcards[currentCard]
  
  // Handle navigation from BodyMap with selectedPointId
  useEffect(() => {
    if (selectedPointId) {
      const pointIndex = flashcards.findIndex(card => card.id === selectedPointId)
      if (pointIndex !== -1) {
        setCurrentCard(pointIndex)
      }
    }
  }, [selectedPointId, flashcards])
  
  // Load user stats for current card
  useEffect(() => {
    if (card) {
      const stats = ProgressTracker.getQuizStats(card.id)
      setUserStats(stats)
    }
  }, [currentCard, card])
  
  // Check voice availability
  useEffect(() => {
    const checkVoices = () => {
      const info = pronunciationManager.getVoiceInfo()
      setVoiceInfo(info)
      console.log('Voice availability:', info)
    }
    
    // Check immediately
    checkVoices()
    
    // Also check when voices change (they might load asynchronously)
    const handleVoicesChanged = () => {
      setTimeout(checkVoices, 100) // Small delay to ensure voices are loaded
    }
    
    if ('speechSynthesis' in window) {
      speechSynthesis.addEventListener('voiceschanged', handleVoicesChanged)
      return () => {
        speechSynthesis.removeEventListener('voiceschanged', handleVoicesChanged)
      }
    }
  }, [])
  
  const nextCard = () => {
    // Track progress when moving to next card (studying current card)
    if (card) {
      ProgressTracker.studyPoint(card.id, card.meridian)
    }
    setIsFlipped(false)
    setCurrentCard((prev) => (prev + 1) % flashcards.length)
  }

  const prevCard = () => {
    setIsFlipped(false)
    setCurrentCard((prev) => (prev - 1 + flashcards.length) % flashcards.length)
  }

  const flipCard = () => {
    // Track progress when flipping card (studying point)
    if (card && !isFlipped) {
      ProgressTracker.studyPoint(card.id, card.meridian)
    }
    setIsFlipped(!isFlipped)
  }
    const startQuiz = () => {
    navigateTo('quiz', { sessionMode: 'flashcard-review' })
  }
  const handleFlag = () => {
    setShowFlagModal(true)
  }
  
  const handlePronunciation = (text, isKorean = false, event) => {
    // Prevent the card from flipping when pronunciation button is clicked
    if (event) {
      event.stopPropagation()
    }
    
    try {
      if (isKorean) {
        const success = pronunciationManager.speakKorean(text)
        if (!success) {
          console.warn('Korean pronunciation failed')
        }
      } else {
        const success = pronunciationManager.speakRomanized(text)
        if (!success) {
          console.warn('Romanized pronunciation failed')
        }
      }
    } catch (error) {
      console.error('Pronunciation error:', error)
    }
  }

  const submitFlag = () => {
    if (!flagReason.trim()) return
    
    // Store flag data in localStorage for now (could be sent to a server in production)
    const flagData = {
      pointId: card.id,
      pointNumber: card.number,
      pointName: card.nameEnglish,
      reason: flagReason,
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent
    }
    
    // Get existing flags or initialize array
    const existingFlags = JSON.parse(localStorage.getItem('meridian-mastery-flags') || '[]')
    existingFlags.push(flagData)
    localStorage.setItem('meridian-mastery-flags', JSON.stringify(existingFlags))
    
    setFlagSubmitted(true)
    setFlagReason('')
    
    // Auto-close modal after showing success
    setTimeout(() => {
      setShowFlagModal(false)
      setFlagSubmitted(false)
    }, 2000)
  }

  const closeFlagModal = () => {
    setShowFlagModal(false)
    setFlagReason('')
    setFlagSubmitted(false)
  }

  const getElementColor = (element) => {
    const colors = {
      wood: 'border-green-500 bg-green-500/10',
      fire: 'border-red-500 bg-red-500/10',
      earth: 'border-yellow-500 bg-yellow-500/10',
      metal: 'border-gray-400 bg-gray-400/10',
      water: 'border-blue-500 bg-blue-500/10',
      violet: 'border-purple-500 bg-purple-500/10'
    }
    return colors[element] || 'border-gray-500 bg-gray-500/10'
  }
  
  if (flashcards.length === 0) {
    return (
      <div className="min-h-screen kuk-sool-gradient text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-yellow-400 mx-auto mb-4"></div>
          <p>Loading flashcards...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-800 text-white korean-flow-pattern">
      <div className="container mx-auto px-3 py-4 max-w-md">
        {/* Header */}
        <div className="flex items-center justify-between mb-4 relative">
          <button 
            onClick={() => navigateTo('home')}
            className="element-metal p-2 rounded-xl transition-all duration-300 hover:scale-110"
          >
            <span className="text-lg">🏠</span>
          </button>
          
          {/* Progress */}
          <div className="flex-1 mx-3">
            <div className="bg-gray-800 rounded-full h-2 relative overflow-hidden">
              <div 
                className="h-full bg-gradient-to-r from-red-500 via-yellow-500 to-green-500 rounded-full transition-all duration-500"
                style={{ width: `${((currentCard + 1) / flashcards.length) * 100}%` }}
              ></div>
            </div>
            <p className="text-center text-xs text-gray-400 mt-1">
              {currentCard + 1} / {flashcards.length}
            </p>
          </div>
          
          <button 
            onClick={() => setShowFlagModal(true)}
            className="element-fire p-2 rounded-xl transition-all duration-300 hover:scale-110"
          >
            <span className="text-lg">🚩</span>
          </button>
        </div>

        {/* Main Card - Mobile Optimized */}
        <div className="card relative mb-4 yin-yang-flow dancheong-border">
          {/* Element Badge */}
          {card && (
            <div className="flex justify-center mb-3">
              <span className={`inline-block px-2 py-1 rounded-full text-xs font-bold ${
                card.element === 'wood' ? 'element-wood' :
                card.element === 'fire' ? 'element-fire' :
                card.element === 'earth' ? 'element-earth' :
                card.element === 'metal' ? 'element-metal' :
                card.element === 'water' ? 'element-water' :
                'element-violet'
              }`}>
                {card.element ? `${card.element.toUpperCase()} 元素` : 'ENERGY POINT'}
              </span>
            </div>
          )}
          
          {/* Card Content - Compact */}
          <div 
            className="min-h-96 flex flex-col justify-center items-center text-center cursor-pointer p-4 rounded-xl transition-all duration-500 transform hover:scale-105"
            onClick={() => setIsFlipped(!isFlipped)}
          >
            {!isFlipped ? (
              // Front - Same as before but slightly more compact
              <div className="text-center mb-6">
                <div className="bg-gradient-to-r from-red-800 to-red-900 text-white px-4 py-1 rounded-lg inline-block mb-4 border border-yellow-600">
                  <span className="font-bold text-sm">{card.number} ↔</span>
                </div>

                <div className="mb-4">
                  <div className="text-3xl font-bold text-yellow-400 mb-2 text-center" style={{ fontFamily: 'serif' }}>
                    {card.nameHangul}
                  </div>                  <div className="flex justify-center">
                    <button 
                      onClick={(e) => handlePronunciation(card.nameHangul, true, e)}
                      className={`w-8 h-8 rounded-full flex items-center justify-center text-white transition-all duration-200 ${
                        voiceInfo?.hasKoreanVoice 
                          ? 'bg-blue-600 hover:bg-blue-500' 
                          : 'bg-gray-600 hover:bg-gray-500'
                      }`}
                      title={voiceInfo?.hasKoreanVoice 
                        ? `Pronounce Korean (${voiceInfo.koreanVoiceName})` 
                        : 'Pronounce Korean (fallback voice)'
                      }
                    >
                      {voiceInfo?.hasKoreanVoice ? '🔊' : '🔈'}
                    </button>
                  </div>
                </div>
                  <div className="mb-6">
                  <div className="text-xl font-bold text-white mb-2 text-center">
                    {card.nameEnglish}
                  </div>
                  
                  {/* Pronunciation Guide Toggle */}
                  <div className="flex justify-center items-center gap-2 mb-2">
                    <button 
                      onClick={(e) => handlePronunciation(card.nameRomanized, false, e)}
                      className="w-8 h-8 bg-green-600 hover:bg-green-500 rounded-full flex items-center justify-center text-white transition-all duration-200"
                      title="Pronounce romanized"
                    >
                      🔊
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation()
                        setShowPronunciationGuide(!showPronunciationGuide)
                      }}
                      className="text-xs bg-purple-600 hover:bg-purple-500 text-white px-2 py-1 rounded transition-all duration-200"
                      title="Show pronunciation guide"
                    >
                      {showPronunciationGuide ? 'Hide Guide' : 'How to Say'}
                    </button>
                  </div>

                  {/* Pronunciation Guide */}
                  {showPronunciationGuide && (
                    <div className="bg-gradient-to-r from-purple-900/30 to-purple-800/30 border border-purple-600 rounded-lg p-3 mt-2 text-center">
                      <PronunciationGuide romanized={card.nameRomanized} />
                    </div>
                  )}
                </div>
              </div>
            ) : (
              // Back - Mobile Optimized Layout
              <div className="space-y-3 mb-4 w-full">
                {/* Compact Header */}
                <div className="text-center">
                  <div className="bg-gradient-to-r from-red-800 to-red-900 text-white px-3 py-1 rounded-lg inline-block border border-yellow-600">
                    <span className="font-bold text-xs">{card.number} ↔</span>
                  </div>
                  <div className="mt-1">
                    <h3 className="text-base font-bold text-yellow-400">{card.nameRomanized}</h3>
                    <h4 className="text-sm text-gray-300">{card.nameEnglish}</h4>
                    <p className="text-xs text-gray-400">{card.meridian} Meridian</p>                      <div className="flex justify-center gap-1 mt-1">
                      <button 
                        onClick={(e) => handlePronunciation(card.nameHangul, true, e)}
                        className={`w-5 h-5 rounded-full flex items-center justify-center text-white text-xs transition-all duration-200 ${
                          voiceInfo?.hasKoreanVoice 
                            ? 'bg-blue-600 hover:bg-blue-500' 
                            : 'bg-gray-600 hover:bg-gray-500'
                        }`}
                        title={voiceInfo?.hasKoreanVoice 
                          ? `Korean (${voiceInfo.koreanVoiceName})` 
                          : 'Korean (fallback)'
                        }
                      >
                        {voiceInfo?.hasKoreanVoice ? '🔊' : '🔈'}
                      </button>
                      <button 
                        onClick={(e) => handlePronunciation(card.nameRomanized, false, e)}
                        className="w-5 h-5 bg-green-600 hover:bg-green-500 rounded-full flex items-center justify-center text-white text-xs transition-all duration-200"
                        title="Romanized"
                      >
                        🔊
                      </button>
                    </div>
                  </div>
                </div>

                {/* Compact Info Sections */}
                <div className="bg-gradient-to-r from-yellow-900/30 to-yellow-800/30 border border-yellow-600 rounded-lg p-2">
                  <h4 className="font-bold text-yellow-400 mb-1 text-xs">STRIKING EFFECT:</h4>
                  <p className="text-gray-200 text-xs leading-tight">{card.martialApplication}</p>
                </div>

                <div className="bg-gradient-to-r from-yellow-900/30 to-yellow-800/30 border border-yellow-600 rounded-lg p-2">
                  <h4 className="font-bold text-yellow-400 mb-1 text-xs">HEALING:</h4>
                  <p className="text-gray-200 text-xs leading-tight">{card.healingFunction}</p>
                </div>
                
                <div className="bg-gradient-to-r from-yellow-900/30 to-yellow-800/30 border border-yellow-600 rounded-lg p-2">
                  <div className="flex justify-between items-start mb-1">
                    <h4 className="font-bold text-yellow-400 text-xs">INSIGHT</h4>
                    {userStats.isMastered && (
                      <span className="text-green-400 text-xs bg-green-500/20 px-1 py-0.5 rounded border border-green-500">
                        ✓
                      </span>
                    )}
                  </div>
                  <p className="text-gray-200 text-xs leading-tight mb-1">
                    {ProgressTracker.generateInsight(card, userStats)}
                  </p>
                  {userStats.totalAttempts > 0 && (
                    <div className="text-xs text-gray-400 border-t border-gray-600 pt-1">
                      Quiz: {userStats.retentionScore}% ({userStats.attempts.correct}/{userStats.totalAttempts})
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Compact Bottom Controls */}
            <div className="space-y-3 w-full">
              <div className="flex justify-between items-center gap-2">
                <button 
                  onClick={prevCard}
                  className="text-gray-400 hover:text-white px-2 py-1 text-lg"
                  title="Previous"
                >
                  ←
                </button>

                <button 
                  onClick={flipCard}
                  className="bg-gradient-to-r from-red-800 to-red-900 hover:from-red-700 hover:to-red-800 text-white font-bold py-2 px-6 rounded-lg border border-yellow-600 text-sm"
                >
                  FLIP
                </button>

                <button 
                  onClick={nextCard}
                  className="text-gray-400 hover:text-white px-2 py-1 text-lg"
                  title="Next"
                >
                  →
                </button>
              </div>

              <button
                onClick={startQuiz}
                className="w-full bg-gradient-to-r from-yellow-900/30 to-yellow-800/30 hover:from-yellow-800/40 hover:to-yellow-700/40 border border-yellow-600 text-yellow-400 py-2 px-4 rounded-lg font-bold text-sm"
              >
                🧠 TEST KNOWLEDGE
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Flag Modal - Same as before */}
      {showFlagModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-900 border border-orange-600 rounded-lg p-6 max-w-md w-full">
            {!flagSubmitted ? (
              <>
                <h3 className="text-xl font-bold text-orange-400 mb-4">Report Issue</h3>
                <p className="text-gray-300 mb-4">
                  Found a problem with <span className="text-yellow-400 font-semibold">{card.number} - {card.nameEnglish}</span>? 
                  Let us know so we can improve the content.
                </p>
                
                <div className="mb-4">
                  <label className="block text-gray-300 text-sm font-bold mb-2">
                    What's the issue?
                  </label>
                  <select
                    value={flagReason}
                    onChange={(e) => setFlagReason(e.target.value)}
                    className="w-full bg-gray-800 border border-gray-600 text-white rounded px-3 py-2 focus:outline-none focus:border-orange-500"
                  >
                    <option value="">Select an issue type...</option>
                    <option value="incorrect-translation">Incorrect Korean translation</option>
                    <option value="wrong-location">Wrong anatomical location</option>
                    <option value="incorrect-function">Incorrect healing function</option>
                    <option value="wrong-meridian">Wrong meridian assignment</option>
                    <option value="martial-application-error">Martial application error</option>
                    <option value="spelling-grammar">Spelling or grammar error</option>
                    <option value="missing-information">Missing important information</option>
                    <option value="other">Other issue</option>
                  </select>
                </div>

                <div className="flex space-x-3">
                  <button
                    onClick={submitFlag}
                    disabled={!flagReason.trim()}
                    className={`flex-1 py-2 px-4 rounded font-bold ${
                      flagReason.trim()
                        ? 'bg-orange-800 hover:bg-orange-700 text-white border border-orange-600'
                        : 'bg-gray-700 text-gray-500 border border-gray-600 cursor-not-allowed'
                    }`}
                  >
                    Submit Report
                  </button>
                  
                  <button
                    onClick={closeFlagModal}
                    className="flex-1 bg-gray-700 hover:bg-gray-600 text-gray-300 py-2 px-4 rounded border border-gray-600"
                  >
                    Cancel
                  </button>
                </div>
              </>
            ) : (
              <div className="text-center">
                <div className="text-green-400 text-4xl mb-4">✓</div>
                <h3 className="text-xl font-bold text-green-400 mb-2">Report Submitted</h3>
                <p className="text-gray-300">Thank you for helping us improve the content!</p>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  )
}

export default Flashcard
